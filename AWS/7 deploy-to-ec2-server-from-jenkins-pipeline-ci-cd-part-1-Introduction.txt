Intro

In previous Jenkins Module we did:
- build the app
- build the image (DockerHub)
- push to private repo (Docker Hub)

Deploy application on a server.
Continue to the deployment part to deploy to EC2.

CI Server (Jenkins)<------------

1st: focus on deployment step to AWS EC2

2nd: we will check the complete pipeline.

Deploy Web Application on EC2 pipeline.
Connect to EC2 server instance from Jenkins server via ssh (ssh agent).
Execute docker run on EC2 Instance.

Install SSH Agent plugin and create SSH credentials type <-------------------
- let's look for SSH Agent. 
This plugin allows you to provide SSH credentials to builds via a ssh-agent in Jenkins. 


From the local machine with a .pem file:
ssh -i .ssh/docker-server.pem ec2-user@25.243.244.244

- create in Jenkins the creds
- inside the pipeline, so it's only visible to this pipeline and no other builds
- select 'SSH Username with private key' to create the credentials.
- Copy the pem file contents in the Private key - enter directly with the username. The ID name can be anything descriptive to you.

- We need to use this credential in our pipeline Jenkins file, so it can authenticate.

See Jenkinsfile syntax for a plugin<----------------------

Under your pipeline look for 'Pipeline Syntax'. Lots of steps under Sample Steps. Find 'sshagent: SSH Agent'. Choose the username for SSH and Generate Pipeline Script.


Connect to EC2 and run Docker commands <------------------
 
We need to test this function with a simple Jenkinsfile by adding the SSH agent command generated by the Generate Pipeline Script.

#########
stage ('deploy') {
	steps {
		script {
			def dockerCmd = 'docker run -p 3080:3080 -d sly/demo-app:1.0' #private repo
			sshagent(['ec2-server-key']) { 			#reference to the ID name
			ssh "ssh -o StrictHostKeyChecking=no ec2-user@35.254.21.21 ${dockerCmd}"
		}
	}
}
##########

'Docker login' first on EC2.

Update the Docker repo.


Configure the Firewall on EC2<-----------------------
- allow access from Jenkins IP address


Run Jenkins Pipeline and access Webapp <---------------------

- we can now go to the pipeline and execute the task
- we can check the Output logs.

Let's go to the EC2 server and check for the image:
docker images
docker ps #the container should be running.

We can now check the running app running in AWS. 


Executing complete Pipeline <------------------
Complete CI/CD Pipeline....

- use the Jenkinsfile from before to execute with the new app.


Deploy App using SSH <------------
- applicable for all servers or cloud providers

Simple Use Case <------
- Connect to server and start 1 Docker container
- for smaller projects


Complex Setups <----------
- deployment looks different for tens or hundreds of containers
- container orchestration tool


Using Docker Compose for Deployment <----------
- a more advanced use case
- small application, which starts through Docker Compose
- copy docker-compose file from Git Repo and execute inside sshAgent
- execute docker-compose command on the EC2 server.


####################

Continued to Video 2.