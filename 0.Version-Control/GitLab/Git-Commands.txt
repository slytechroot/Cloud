git status
result: (not a git repository)
(because the .git folder is missing)

#in any folder as long as the Git client is installed
git init
(and then normal git commands)

#to add all files
git add . 
git commit
(add message)

git status
(no changes to commit)

git log
(to get the hash of the commit)

git push
(no configured push destination)

git remote add origin git@gitlab.com:sly/test-node-app.git
git status
git push
fatal: The current branch master has no upstream branch.
(repo is connected, branch is Not)

git push --set-upstream origin master
(Branch master setup to track remote branch master from origin)
(branch connected)
(refresh your Gitlab page to see the uploaded info)
- if we deleted the .git folder we wouldn't be connected to the repo anymore, so we'd have to reconnect it)
rm -rf .git
git status
fatal: not a git repository.

#Concept of branching
Master branch is the main branch, created by default when initializing a repo.
Best practice: It's best to create a branch for each feature and each bugfix. 
Developers can commit without worrying to break main branch.
Big feature branches long open, increase the chance of 'merge conflicts'.
With branches, you achieve a stable main (master) branch, which is ready for deployment.
Any branch is based on the master branch. Branch starts from the same codebase.

git branch

(but the local master branch doesn't know about the other branches created in cloud, so we need to update the local info)
git pull

To switch in between branches:
git checkout <branchname>, so:
git checkout bugfix/user-auth
(now we'd get the local branch connected to the remote branch, so every change to the local code, will only affected the branch 'bugfix/user-auth')










 





























