.gitignore file to ignore certain project documents:
--------
### Edit it and add ###
build/
*.txt

--------
###################################
.gitignore <---------------

git status
git add .gitignore
git commit -m "Added .gitignore file with IGNORE RULES"
git push origin master #to push local changes to remote GitHub repo

###########
Branching <------------

git branch "descriptive-greetings"
git status
git branch
git checkout descriptive-greetings
git branch 
(now "descriptive-greetings" is in green)

git status
(nothing to commit)

ls

vi greetings.py

git status
git add greetings.py
git commit -m "added motivation phrase"

ls
vi moon_flight.py
(add some text)

git status
(moon_flight.py added)
git add moon_flight.py
git commit -m "added moon flight file and functionality"

(push the changes back to the master)
git push origin master
(Everything is up-to-date)
git push origin descriptive-greetings
(this will push everything from your local git branch to GitHub)

You will notice that moon_flight.py is not part of the master branch and that's because we worked under the "descriptive-greetings" branch. 
Browse to the "descriptive-greetings" branch and notice that the files in there, are in their own branch, but not part of the "master" branch.

Branching is an important concept of Git/GitHub. 
Spend time to understand the concepts. More things coming.....

#######################
Untracked Files <-----------

5 Stages:
Untracked by Git --> Tracked by Git (not changed) --> Tracked by Git (Changed) --> Staged --> Committed.

vi hello.py
git status
(Untracked files: hello.py)

git add hello.py
git status
(this file is now tracked by Git, because it says 'changes to be committed').
##########
Staging Modified files <-----------

git status
ls
git status
git add goodnight.py
git status
- if you see the following
On branch master
Changed to be committed:
(use 'git restore --staged <file>...' to unstage)
modified: goodnight.py
new file: hello.py
- this means the files are in a staging mode/state!!!!

############
Two states after staged <--------------
- This means that one can have a file in a Staged state and in a non-Staged state. Interesting? How can I file be in two different states?
What happens is that you had the file added (with 'git add <filename>') to the Staged state, but then you modified the file AGAIN and this modification put the file in a second state of un-Staged. Typically after using the 'git add <filename>' command you'd 'git commit -m <message>' the file, but we didn't and chose instead to modify it again, this put the file in that secondary state of un-Staged.
The file with the last modifications shows up as Un-Staged, because after the changes, the file was not Staged to be Committed. 

So the way this works, is that you can Commit the changes you've done to the file up to the point where you ran the command 'git add <filename>', and it will post those changes to the GitHub. You won't see the 
last changes, because you'd have to run 'git add <filename>' again to merge the last changes made to the file and then 'git commit -m' again to Commit the last changes to GitHub. 

##############
Committing/Snapshot <------

How can we commit the changes in the Staging area?
Only the files that were Staged can be part of the standard Commit. The files that are Un-Staged, are not going to be part of the Commit. They are tracked by Git, but are not in the Stage area and will not be committed. 

Notice the branch where it gets committed (such as master or another branch) and also the SHA-1 checksum (signature) that the commit has. 

##############
Skipping Staging Area <-------

- useful for when you want to avoid using the 'git add <Mfilename>' command.

git commit -a -m <"message ">
(-a to skip the Staging area)

#########################
Branching - Real Life Scenarion <----------

git checkout -b feature
(switched to a new branch 'feature'

git branch feature.py
git commit -m "Initial part of the development is now ready"

Note: if you have uncommitted changes, git will not let you change branches with 'git checkout <branchName>'. Have a clean working state if you're going to change branches. For this, run 'git status'. Modifications are OK, but they are uncommited with the command 'git add <file>'. 

###
Create a new branch to be used for troubleshooting: <-----
- go back to the master branch
git checkout master

Switch to new branch issue:
git checkout -b issue
git add hellow.py
git commit -m "descriptive message from the instructor"































